package PipSqueek::Plugin::WolframAlpha;
use base qw(PipSqueek::Plugin);

use WWW::WolframAlpha;
use URI::Escape qw(uri_escape);

sub plugin_initialize {
    my $self = shift;

    $self->plugin_handlers(
        {
            'multi_wa'        => 'wolframalpha',
            'multi_wolframalpha'  => 'wolframalpha',
        }
    );
}

sub wolframalpha {
    my ($self, $message) = @_;

    $self->respond($message, $self->make_query($message->command_input())); 
}

sub make_query {
    my ($self, $input) = @_;

    my $wa = WWW::WolframAlpha->new(
        'appid' => '9A8Y73-6THLQ5HUA2' # generated by shaun for idlemonkeys.net
    );

    my $q = $wa->query(
        'input' => $input,
        'format' => 'plaintext',
        'includepodid' => ['Input', 'Result', 'WeatherForecast:WeatherData', 'ForecastCharts:WeatherData'],
        'reinterpret' => 'true',
    );

    my $try_website = 'Try http://www.wolframalpha.com/input/?i=' . uri_escape($input);
    my $return_str  = "";

    if ($q->success) {
        my @output = ();

        foreach my $pod (@{$q->pods}) {
            if (!$pod->error) {
                my $outer_id = $pod->id;

                foreach my $subpod (@{$pod->subpods}) {
                    next unless $subpod->plaintext;
                    my $plaintext = $subpod->plaintext;

                    if (ref $plaintext eq 'HASH' && !(keys %$plaintext)) {
                        next;
                    }

                    my $title = $subpod->title;

                    $plaintext =~ s/\n/ /g;
                    $plaintext =~ s/  / /g;
                    $plaintext =~ s/^\s*//;
                    $plaintext =~ s/\s*$//;

                    if ($outer_id eq 'Input') {
                        push @output, qq{"$plaintext"};
                    }
                    else {
                        $plaintext =~ s/\s*\|\s*/ /g;
                        push @output, "$title: $plaintext";
                    }
                }
            }
        }

        if (@output) {
            my $first = shift @output;
            my $rest = @output ? join(', ', @output) : '';
            $return_str = "$first" . ($rest ? " - $rest" : '');
        }
        else {
            $return_str = $try_website;
        }
    }
    else {
        $return_str = $try_website;
    }

    #print Dumper($q->{'xmlo'}), "\n";
    #print $q->{'xml'}, "\n";
    
    return $return_str;
}

1;

__END__




